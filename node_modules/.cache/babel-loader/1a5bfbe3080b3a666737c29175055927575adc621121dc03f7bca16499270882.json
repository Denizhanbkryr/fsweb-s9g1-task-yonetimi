{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\deniz\\\\fsweb-s9g1-task-yonetimi\\\\src\\\\TaskHookForm.js\",\n  _s = $RefreshSig$();\n/*import React from 'react'\r\n\r\nexport default function TaskHookForm() {\r\n  return (\r\n    <div>Formunuzu react-hook-form kullanarak burada oluşturun. TaskForm dosyasındaki HTML yapısını vs app.css içerisindeki classları kullanabilirsiniz.</div>\r\n  )\r\n}\r\n*/\nimport React from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TaskHookForm(_ref) {\n  _s();\n  var _errors$title, _errors$description, _errors$people;\n  let {\n    kisiler,\n    submitFn\n  } = _ref;\n  const {\n    handleSubmit,\n    control,\n    errors\n  } = useForm();\n  const onSubmit = data => {\n    // You can access the form data in the \"data\" object here\n    // You can perform form submission logic, e.g., call \"submitFn\"\n    console.log(data);\n    submitFn({\n      ...data,\n      id: nanoid(5),\n      status: \"yapılacak\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"taskForm\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-line\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        htmlFor: \"title\",\n        children: \"Ba\\u015Fl\\u0131k\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"title\",\n        control: control,\n        defaultValue: \"\",\n        rules: {\n          required: \"Task başlığı yazmalısınız\",\n          minLength: {\n            value: 3,\n            message: \"Task başlığı en az 3 karakter olmalı\"\n          }\n        },\n        render: _ref2 => {\n          let {\n            field\n          } = _ref2;\n          return /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input-text\",\n            id: \"title\",\n            type: \"text\",\n            ...field\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"input-error\",\n        children: (_errors$title = errors.title) === null || _errors$title === void 0 ? void 0 : _errors$title.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-line\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        htmlFor: \"description\",\n        children: \"A\\xE7\\u0131klama\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"description\",\n        control: control,\n        defaultValue: \"\",\n        rules: {\n          required: \"Task açıklaması yazmalısınız\",\n          minLength: {\n            value: 10,\n            message: \"Task açıklaması en az 10 karakter olmalı\"\n          }\n        },\n        render: _ref3 => {\n          let {\n            field\n          } = _ref3;\n          return /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"input-textarea\",\n            rows: \"3\",\n            id: \"description\",\n            ...field\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"input-error\",\n        children: (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-line\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-label\",\n        children: \"\\u0130nsanlar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: kisiler.map(p => /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-checkbox\",\n          children: [/*#__PURE__*/_jsxDEV(Controller, {\n            name: \"people\",\n            control: control,\n            defaultValue: [],\n            render: _ref4 => {\n              let {\n                field\n              } = _ref4;\n              return /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                value: p,\n                ...field,\n                checked: field.value.includes(p)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 19\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), p]\n        }, p, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"input-error\",\n        children: (_errors$people = errors.people) === null || _errors$people === void 0 ? void 0 : _errors$people.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-line\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"submit-button\",\n        type: \"submit\",\n        children: \"Kaydet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskHookForm, \"jF9uUDzoj20MJs+pN6QeescyD3Q=\", false, function () {\n  return [useForm];\n});\n_c = TaskHookForm;\nvar _c;\n$RefreshReg$(_c, \"TaskHookForm\");","map":{"version":3,"names":["React","useForm","Controller","TaskHookForm","kisiler","submitFn","handleSubmit","control","errors","onSubmit","data","console","log","id","nanoid","status","required","minLength","value","message","field","title","description","map","p","includes","people"],"sources":["C:/Users/deniz/fsweb-s9g1-task-yonetimi/src/TaskHookForm.js"],"sourcesContent":["/*import React from 'react'\r\n\r\nexport default function TaskHookForm() {\r\n  return (\r\n    <div>Formunuzu react-hook-form kullanarak burada oluşturun. TaskForm dosyasındaki HTML yapısını vs app.css içerisindeki classları kullanabilirsiniz.</div>\r\n  )\r\n}\r\n*/\r\nimport React from \"react\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\n\r\nexport default function TaskHookForm({ kisiler, submitFn }) {\r\n  const { handleSubmit, control, errors } = useForm();\r\n\r\n  const onSubmit = (data) => {\r\n    // You can access the form data in the \"data\" object here\r\n    // You can perform form submission logic, e.g., call \"submitFn\"\r\n    console.log(data);\r\n    submitFn({\r\n      ...data,\r\n      id: nanoid(5),\r\n      status: \"yapılacak\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form className=\"taskForm\" onSubmit={handleSubmit(onSubmit)}>\r\n      <div className=\"form-line\">\r\n        <label className=\"input-label\" htmlFor=\"title\">\r\n          Başlık\r\n        </label>\r\n        <Controller\r\n          name=\"title\"\r\n          control={control}\r\n          defaultValue=\"\"\r\n          rules={{\r\n            required: \"Task başlığı yazmalısınız\",\r\n            minLength: {\r\n              value: 3,\r\n              message: \"Task başlığı en az 3 karakter olmalı\",\r\n            },\r\n          }}\r\n          render={({ field }) => (\r\n            <input className=\"input-text\" id=\"title\" type=\"text\" {...field} />\r\n          )}\r\n        />\r\n        <p className=\"input-error\">{errors.title?.message}</p>\r\n      </div>\r\n\r\n      <div className=\"form-line\">\r\n        <label className=\"input-label\" htmlFor=\"description\">\r\n          Açıklama\r\n        </label>\r\n        <Controller\r\n          name=\"description\"\r\n          control={control}\r\n          defaultValue=\"\"\r\n          rules={{\r\n            required: \"Task açıklaması yazmalısınız\",\r\n            minLength: {\r\n              value: 10,\r\n              message: \"Task açıklaması en az 10 karakter olmalı\",\r\n            },\r\n          }}\r\n          render={({ field }) => (\r\n            <textarea\r\n              className=\"input-textarea\"\r\n              rows=\"3\"\r\n              id=\"description\"\r\n              {...field}\r\n            />\r\n          )}\r\n        />\r\n        <p className=\"input-error\">{errors.description?.message}</p>\r\n      </div>\r\n\r\n      <div className=\"form-line\">\r\n        <label className=\"input-label\">İnsanlar</label>\r\n        <div>\r\n          {kisiler.map((p) => (\r\n            <label className=\"input-checkbox\" key={p}>\r\n              <Controller\r\n                name=\"people\"\r\n                control={control}\r\n                defaultValue={[]}\r\n                render={({ field }) => (\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    value={p}\r\n                    {...field}\r\n                    checked={field.value.includes(p)}\r\n                  />\r\n                )}\r\n              />\r\n              {p}\r\n            </label>\r\n          ))}\r\n        </div>\r\n        <p className=\"input-error\">{errors.people?.message}</p>\r\n      </div>\r\n\r\n      <div className=\"form-line\">\r\n        <button className=\"submit-button\" type=\"submit\">\r\n          Kaydet\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}